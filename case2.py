import logging
import sqlite3
import os
import pandas as pd
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import datetime

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = "7580331808:AAHxGMkM7ypuJAqmzwt-J1u-_XqX_R5Oepw"
DB_NAME = "schedule_bot_v2.db"
FACULTIES = ["–ò–≠–ò–°", "–ò–¶–≠–£–°", "–ü–ò", "–ò–ë–•–ò", "–ò–ì–£–ú", "–ò–ú–û", "–ò–Æ–†", "–ò–ü–¢", "–ü–¢–ò"]
COURSES = ["1", "2", "3", "4", "5", "6"]
DAYS_OF_WEEK = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]
TIME_SLOTS = [f"—Å {h}:00 –¥–æ {h+1}:00" for h in range(6, 21)]
(SELECT_FACULTY, SELECT_COURSE, SELECT_GROUP, ADD_GROUP_PROMPT,
 SELECT_DAY, ENTER_SCHEDULE, POST_SAVE_OPTIONS, EXPORT_ASK_DAY) = range(8)
(CALLBACK_FACULTY, CALLBACK_COURSE, CALLBACK_GROUP, CALLBACK_DAY) = ("FACULTY", "COURSE", "GROUP", "DAY")

def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS groups (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            faculty TEXT NOT NULL,
            course INTEGER NOT NULL,
            group_name TEXT NOT NULL,
            UNIQUE(faculty, course, group_name)
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS schedule_entries (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            faculty TEXT NOT NULL,
            course INTEGER NOT NULL,
            group_name TEXT NOT NULL,
            day_of_week TEXT NOT NULL,
            time_slot TEXT NOT NULL,
            subject TEXT NOT NULL
        )
    """)
    conn.commit()
    conn.close()
    logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {DB_NAME} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

def add_group_db(faculty: str, course: int, group_name: str) -> bool:
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT INTO groups (faculty, course, group_name) VALUES (?, ?, ?)",
            (faculty, course, group_name)
        )
        conn.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {faculty}, –ö—É—Ä—Å {course}, {group_name}")
        return True
    except sqlite3.IntegrityError:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É: {faculty}, –ö—É—Ä—Å {course}, {group_name}")
        return False
    finally:
        conn.close()

def get_groups_db(faculty: str, course: int) -> list:
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "SELECT group_name FROM groups WHERE faculty = ? AND course = ? ORDER BY group_name",
        (faculty, course)
    )
    groups = [row[0] for row in cursor.fetchall()]
    conn.close()
    return groups

def save_schedule_entry_db(faculty: str, course: int, group_name: str, day: str, time_slot: str, subject: str):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT INTO schedule_entries (faculty, course, group_name, day_of_week, time_slot, subject) VALUES (?, ?, ?, ?, ?, ?)",
            (faculty, course, group_name, day, time_slot, subject)
        )
        conn.commit()
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {faculty}, –ö{course}, {group_name}, {day}, {time_slot}, {subject}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}")
    finally:
        conn.close()

def delete_schedule_for_day_db(faculty: str, course: int, group_name: str, day: str):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        "DELETE FROM schedule_entries WHERE faculty = ? AND course = ? AND group_name = ? AND day_of_week = ?",
        (faculty, course, group_name, day)
    )
    conn.commit()
    conn.close()
    logger.info(f"–£–¥–∞–ª–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –¥–ª—è {faculty}, –ö{course}, {group_name}, {day}")

def get_schedule_data_db(faculty: str = None, course: int = None, group_name: str = None, day: str = None) -> list:
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    query = "SELECT faculty, course, group_name, day_of_week, time_slot, subject FROM schedule_entries"
    conditions = []
    params = []
    if faculty:
        conditions.append("faculty = ?")
        params.append(faculty)
    if course is not None:
        conditions.append("course = ?")
        params.append(course)
    if group_name:
        conditions.append("group_name = ?")
        params.append(group_name)
    if day:
        conditions.append("day_of_week = ?")
        params.append(day)
    if conditions:
        query += " WHERE " + " AND ".join(conditions)
    query += " ORDER BY faculty, course, group_name, day_of_week, time_slot"
    cursor.execute(query, params)
    data = cursor.fetchall()
    conn.close()
    return data

def create_reply_keyboard(buttons: list, columns: int, one_time: bool = True, add_back: bool = False, add_add_group: bool = False, custom_buttons: list = None) -> ReplyKeyboardMarkup:
    keyboard = []
    row = []
    for i, button_text in enumerate(buttons):
        row.append(button_text)
        if (i + 1) % columns == 0 or i == len(buttons) - 1:
            keyboard.append(row)
            row = []
    if add_add_group:
         keyboard.append(["‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"])
    if custom_buttons:
        for btn_row in custom_buttons:
             keyboard.append(btn_row)
    if add_back:
        keyboard.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=one_time)

def create_inline_keyboard(buttons: list, columns: int) -> InlineKeyboardMarkup:
    keyboard = []
    row = []
    for i, button_text in enumerate(buttons):
        row.append(InlineKeyboardButton(button_text, callback_data=button_text))
        if (i + 1) % columns == 0 or i == len(buttons) - 1:
            keyboard.append(row)
            row = []
    return InlineKeyboardMarkup(keyboard)

def time_slot_to_start_time(time_slot: str) -> str:
    parts = time_slot.split()
    if len(parts) >= 2:
        return parts[1] 
    return "?"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    context.user_data.clear()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} ({user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    reply_markup = create_reply_keyboard(FACULTIES, columns=3)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç/—Ñ–∞–∫—É–ª—å—Ç–µ—Ç:",
        reply_markup=reply_markup,
    )
    return SELECT_FACULTY

async def select_faculty(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    faculty = update.message.text
    if faculty not in FACULTIES:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return SELECT_FACULTY
    context.user_data[CALLBACK_FACULTY] = faculty
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤—ã–±—Ä–∞–ª —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {faculty}")
    reply_markup = create_reply_keyboard(COURSES, columns=3, add_back=True)
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=reply_markup)
    return SELECT_COURSE

async def select_course(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    course_text = update.message.text
    if course_text not in COURSES:
         await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
         return SELECT_COURSE
    course = int(course_text)
    context.user_data[CALLBACK_COURSE] = course
    faculty = context.user_data[CALLBACK_FACULTY]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤—ã–±—Ä–∞–ª –∫—É—Ä—Å: {course} –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ {faculty}")
    await send_group_selection(update, context)
    return SELECT_GROUP

async def send_group_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, message_id_to_edit: int = None):
    faculty = context.user_data[CALLBACK_FACULTY]
    course = context.user_data[CALLBACK_COURSE]
    groups = get_groups_db(faculty, course)
    reply_markup_main = create_reply_keyboard([], columns=1, add_back=True, add_add_group=True)
    if groups:
        inline_markup = create_inline_keyboard(groups, columns=3)
        message_text = f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è {faculty}, –∫—É—Ä—Å {course}:"
        if message_id_to_edit:
             try:
                  await context.bot.edit_message_text(
                       chat_id=update.effective_chat.id,
                       message_id=message_id_to_edit,
                       text=message_text,
                       reply_markup=inline_markup
                  )
                  await update.message.reply_text("(–ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é / –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥)", reply_markup=reply_markup_main)
             except Exception as e:
                  logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.")
                  await update.message.reply_text(message_text, reply_markup=inline_markup)
                  await update.message.reply_text("(–ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é / –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥)", reply_markup=reply_markup_main)
        else:
             await update.message.reply_text(message_text, reply_markup=inline_markup)
             await update.message.reply_text("(–ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é / –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥)", reply_markup=reply_markup_main)
    else:
        message_text = f"–î–ª—è {faculty}, –∫—É—Ä—Å {course} –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø."
        await update.message.reply_text(message_text, reply_markup=reply_markup_main)

async def select_group_inline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    group_name = query.data
    context.user_data[CALLBACK_GROUP] = group_name
    faculty = context.user_data[CALLBACK_FACULTY]
    course = context.user_data[CALLBACK_COURSE]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –≤—ã–±—Ä–∞–ª –≥—Ä—É–ø–ø—É: {group_name} ({faculty}, {course})")
    await query.delete_message()
    reply_markup = create_reply_keyboard(DAYS_OF_WEEK, columns=2, add_back=True)
    await query.message.reply_text(
        f"–ì—Ä—É–ø–ø–∞: {group_name}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
        reply_markup=reply_markup
    )
    return SELECT_DAY

async def prompt_add_group(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞–∂–∞–ª '–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É'.")
    try:
        context.user_data['group_select_message_id'] = update.message.message_id - 1
    except:
        context.user_data['group_select_message_id'] = None
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:", reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"]], resize_keyboard=True))
    return ADD_GROUP_PROMPT

async def add_group_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    new_group_name = update.message.text.strip()
    user = update.effective_user
    if not new_group_name or len(new_group_name) > 50:
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'.")
        return ADD_GROUP_PROMPT
    faculty = context.user_data[CALLBACK_FACULTY]
    course = context.user_data[CALLBACK_COURSE]
    if add_group_db(faculty, course, new_group_name):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª –≥—Ä—É–ø–ø—É: {new_group_name}")
        await update.message.reply_text(f"–ì—Ä—É–ø–ø–∞ '{new_group_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=ReplyKeyboardRemove())
    else:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É: {new_group_name}")
        await update.message.reply_text(f"–ì—Ä—É–ø–ø–∞ '{new_group_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∫—É—Ä—Å–∞ –∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞.", reply_markup=ReplyKeyboardRemove())
    message_id_to_update = context.user_data.pop('group_select_message_id', None)
    await send_group_selection(update, context, message_id_to_edit=message_id_to_update)
    return SELECT_GROUP

async def cancel_add_group(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã.")
    await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    message_id_to_update = context.user_data.pop('group_select_message_id', None)
    await send_group_selection(update, context, message_id_to_edit=message_id_to_update)
    return SELECT_GROUP

async def select_day(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    day = update.message.text
    if day not in DAYS_OF_WEEK:
         await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
         return SELECT_DAY
    context.user_data[CALLBACK_DAY] = day
    faculty = context.user_data[CALLBACK_FACULTY]
    course = context.user_data[CALLBACK_COURSE]
    group_name = context.user_data[CALLBACK_GROUP]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –≤—ã–±—Ä–∞–ª –¥–µ–Ω—å: {day} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}")
    schedule_data = get_schedule_data_db(faculty=faculty, course=course, group_name=group_name, day=day)
    if schedule_data:
        schedule_text = f"–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {day}:\n"
        for entry in schedule_data:
            time_slot = entry[4]
            subject = entry[5]
            start_time = time_slot_to_start_time(time_slot)
            schedule_text += f"{start_time} - {subject}\n"
        message = schedule_text + "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
    else:
        message = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {day} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ '–Ω–µ—Ç'."
    await update.message.reply_text(
        message,
        reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]], resize_keyboard=True)
    )
    return ENTER_SCHEDULE

async def enter_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    faculty = context.user_data[CALLBACK_FACULTY]
    course = context.user_data[CALLBACK_COURSE]
    group_name = context.user_data[CALLBACK_GROUP]
    day = context.user_data[CALLBACK_DAY]
    if text.lower() == '–Ω–µ—Ç':
        delete_schedule_for_day_db(faculty, course, group_name, day)
        await update.message.reply_text(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {day} —É–¥–∞–ª–µ–Ω–æ.")
    else:
        delete_schedule_for_day_db(faculty, course, group_name, day)
        lines = text.split('\n')
        for line in lines:
            line = line.strip()
            if line:
                parts = line.split('-', 1)
                if len(parts) == 2:
                    time_str = parts[0].strip()
                    subject = parts[1].strip()
                    try:
                        hour = int(time_str.split(':')[0])
                        time_slot = f"—Å {hour}:00 –¥–æ {hour+1}:00"
                        if time_slot in TIME_SLOTS:
                            save_schedule_entry_db(faculty, course, group_name, day, time_slot, subject)
                        else:
                            await update.message.reply_text(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {time_str}. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
                    except ValueError:
                        await update.message.reply_text(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {time_str}. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
                else:
                    await update.message.reply_text(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: {line}. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
        await update.message.reply_text(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {day} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    final_options_keyboard = [
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∑–∞–ø–∏—Å—å"], [" E–Ø –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É"],
        ["üìä –í—ã–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è"], ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(final_options_keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)
    return POST_SAVE_OPTIONS

async def add_another_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    group_name = context.user_data.get(CALLBACK_GROUP, "—Ç–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} —Ä–µ—à–∏–ª –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∑–∞–ø–∏—Å—å –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}.")
    context.user_data.pop(CALLBACK_DAY, None)
    reply_markup = create_reply_keyboard(DAYS_OF_WEEK, columns=2, add_back=True)
    await update.message.reply_text(
        f"–î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –∑–∞–ø–∏—Å—å –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
        reply_markup=reply_markup
    )
    return SELECT_DAY

async def go_to_group_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} —Ä–µ—à–∏–ª –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É.")
    context.user_data.pop(CALLBACK_GROUP, None)
    context.user_data.pop(CALLBACK_DAY, None)
    await send_group_selection(update, context)
    return SELECT_GROUP

async def prompt_export_day(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —ç–∫—Å–ø–æ—Ä—Ç –∑–∞ –¥–µ–Ω—å.")
    reply_markup = create_reply_keyboard(DAYS_OF_WEEK, columns=2, add_back=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=reply_markup)
    return EXPORT_ASK_DAY

async def export_day_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    day_to_export = update.message.text
    user = update.effective_user
    if day_to_export not in DAYS_OF_WEEK:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return EXPORT_ASK_DAY
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ {day_to_export}.")
    schedule_data = get_schedule_data_db(day_filter=day_to_export)
    if not schedule_data:
        await update.message.reply_text(f"–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è '{day_to_export}'.")
        final_options_keyboard = [
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∑–∞–ø–∏—Å—å"], [" E–Ø –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É"],
            ["üìä –í—ã–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è"], ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å"]
        ]
        reply_markup = ReplyKeyboardMarkup(final_options_keyboard, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text("–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)
        return POST_SAVE_OPTIONS
    try:
        df = pd.DataFrame(schedule_data, columns=['–§–∞–∫—É–ª—å—Ç–µ—Ç', '–ö—É—Ä—Å', '–ì—Ä—É–ø–ø–∞', '–î–µ–Ω—å', '–í—Ä–µ–º—è', '–ü—Ä–µ–¥–º–µ—Ç'])
        df_sorted = df.sort_values(by=['–ì—Ä—É–ø–ø–∞', '–í—Ä–µ–º—è'])
        current_date = datetime.datetime.now().strftime("%Y-%m-%d")
        excel_filename = f"schedule_{day_to_export}_{user.id}_{current_date}.xlsx"
        df_sorted.to_excel(excel_filename, index=False, engine='openpyxl')
        logger.info(f"Excel —Ñ–∞–π–ª {excel_filename} —Å–æ–∑–¥–∞–Ω.")
        await update.message.reply_document(
            document=open(excel_filename, 'rb'),
            filename=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_{day_to_export}.xlsx",
            caption=f"–í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è '{day_to_export}' –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel."
        )
        os.remove(excel_filename)
        logger.info(f"Excel —Ñ–∞–π–ª {excel_filename} —É–¥–∞–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Excel —Ñ–∞–π–ª–∞ –¥–ª—è –¥–Ω—è {day_to_export}: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    final_options_keyboard = [
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∑–∞–ø–∏—Å—å"], [" E–Ø –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É"],
        ["üìä –í—ã–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è"], ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(final_options_keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)
    return POST_SAVE_OPTIONS

async def back_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞–∂–∞–ª –ù–∞–∑–∞–¥.")
    current_data = context.user_data
    if CALLBACK_DAY in current_data:
        del current_data[CALLBACK_DAY]
        logger.debug("–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã")
        await send_group_selection(update, context)
        return SELECT_GROUP
    elif CALLBACK_GROUP in current_data:
        del current_data[CALLBACK_GROUP]
        logger.debug("–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–∞")
        reply_markup = create_reply_keyboard(COURSES, columns=3, add_back=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=reply_markup)
        return SELECT_COURSE
    elif CALLBACK_COURSE in current_data:
        del current_data[CALLBACK_COURSE]
        logger.debug("–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞")
        reply_markup = create_reply_keyboard(FACULTIES, columns=3)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç/—Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=reply_markup)
        return SELECT_FACULTY
    elif CALLBACK_FACULTY in current_data:
        del current_data[CALLBACK_FACULTY]
        logger.debug("–í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª–æ")
        return await start(update, context)
    else:
        logger.debug("–ù–µ–∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è, –ø–µ—Ä–µ—Ö–æ–¥ –≤ –Ω–∞—á–∞–ª–æ")
        return await start(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
    context.user_data.clear()
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def done(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–≤–µ—Ä—à–∏–ª –≤–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
    context.user_data.clear()
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω.\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def main() -> None:
    init_db()
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_FACULTY: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_faculty)],
            SELECT_COURSE: [
                MessageHandler(filters.Regex("^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$"), back_handler),
                MessageHandler(filters.TEXT & ~filters.COMMAND, select_course),
            ],
            SELECT_GROUP: [
                MessageHandler(filters.Regex("^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$"), back_handler),
                MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É$"), prompt_add_group),
                CallbackQueryHandler(select_group_inline),
                MessageHandler(filters.TEXT & ~filters.COMMAND, lambda update, context: update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã.")),
            ],
            ADD_GROUP_PROMPT: [
                MessageHandler(filters.Regex("^‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è$"), cancel_add_group),
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_group_handler),
            ],
            SELECT_DAY: [
                 MessageHandler(filters.Regex("^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$"), back_handler),
                 MessageHandler(filters.TEXT & ~filters.COMMAND, select_day),
            ],
            ENTER_SCHEDULE: [
                MessageHandler(filters.Regex("^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$"), back_handler),
                MessageHandler(filters.TEXT & ~filters.COMMAND, enter_schedule),
            ],
            POST_SAVE_OPTIONS: [
                MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∑–∞–ø–∏—Å—å$"), add_another_entry),
                MessageHandler(filters.Regex("^ E–Ø –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É$"), go_to_group_selection),
                MessageHandler(filters.Regex("^üìä –í—ã–≤–µ—Å—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è$"), prompt_export_day),
                MessageHandler(filters.Regex("^‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å$"), done),
                MessageHandler(filters.TEXT & ~filters.COMMAND, lambda update, context: update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.")),
            ],
            EXPORT_ASK_DAY: [
                MessageHandler(filters.Regex("^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$"), lambda update, context: POST_SAVE_OPTIONS),
                MessageHandler(filters.TEXT & ~filters.COMMAND, export_day_schedule),
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("start", start))
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (v3)...")
    application.run_polling()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    main()